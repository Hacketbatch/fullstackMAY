What is css(cascanding style sheet ) and how it is used in web development?
this refres to cascanding style sheet and it is used for styling html content "webpage"
how to use it in htm/xml
css can be used in three ways {
    inline>>css implementation done in the html tags "opening html tag using ht style attribute ",most ineffective method >tiresome in redundancy 
    internal >>css implementation in the html tags using the style tags where you input your css code >>less redundant but you have to copy paste each code in every page you wan to target
    external >>an external file with a .css extension ,it can be used in multipage webpages and reduces redundancy>>you only paste thelink to the css file inside the head 
}
types of selectors {
    element selector /tag selector>>these are selectors thatare used to style the html contents via tag names (p,h,div)
    class selector >>is a technique defined by the dot notation and it is used to styel components with the same class name ,it can take multiple classnames per one element 
    {
        .class1 {}
    }
    id>>this is a technique defined by the hash syntax and it is unique and only used once {
        #id {}
    }
    universal selector>>defined by the asteric symbol in that * >>it used to style evry element in the webpage{
        *{}
    }
    attribute selector>>uses the attribute name and the square brackets for the value (combines the tag name with attribute)
    {
        input>>referes to the tagname
        type>attribute name 
        input[type="name"]
    }
    pseiudo class selectors >>selectors that allows us to implement some advanced functionalities ,access children and grand children with ease 
    {
        :hover
        :active
        :nth-class
        :nth-last -of -type
        nth-child-selectors


    }
}
rules of css {
    cascanding >>this referes to the execution of the css code line by line >if a rule is on number 10 then anther rule is on number 40 targetting the same element ,then rule at number 40 will overwrite 
    inheritance >>the child entities inheriuts the properties of the parent entity 
    specificity >>this is the selector precedence (id,class,element selector .....)>>inline css can overule this when writte  with any selecotr 
    importance>>using the important keyword ,this feature allows us to have a fixed style to an element even if it is overwriten by another rule
}
p{
    background-color: red !important;
}

text properties >>this are properties that allows us to style texual components they include alignments ,positions 
color >>denoted the color of the text 
alignments >>classified into four mainly{
:left>>text contnet on the left
:right>>text contnet on the right
center>>text contnet on the center
justified >>text contnet on the left and right start and end at similar positions 
} 
measurements{
    these are numerical figures that help us structure and visualize the layout features {
        width:>>referes the the distance between the left and right side of the viewdisplay point 
        height>>referes the the distance between the top and bottom side of the viewdisplay point 
        vh >>viewpoert height >>meausrements given from a rage of 1-100
        vw viewpoert width >>meausrements given from a rage of 1-100
        px >>
        rem >>this referes to measurements in relation to the font size of  parent measuremt(default 1rem/em=16px)
        em 
        %>>this one is the most flexible relative meaurement unit 

    }
}
border{
    border is an imaginary line that seperates contnet unless some styling is added to it {
        properties of the border{
            width>>denotes the thickness of the border 
            color>>denotes the color of the border 
            style>>denotes the structure of the border 
            radius >>this refers to the curves at the specified edges of the container {
                border-radius: >>transforms the entire div to a specified curvature at the edges 
                border-bottom-left-radius: ;>>transforms the left bottom div to a specified curvature at the edges 
                border-bottom-right-radius: ;transforms the right bottom div to a specified curvature at the edges 
                border-top-left-radius: ;transforms the left top div to a specified curvature at the edges 
                border-top-right-radius: ;transforms the right top  div to a specified curvature at the edges 
            }
        }
    }
}
box model{
    every element in html is considered to have a box layout(rectangle)with these it assumes three 
    distinct features namely {
        margin:a space in between two components /tags/elements:{
            margin-top: ;>>space to the top of the specified  components 
            margin-bottom: ;space to the bottom of the specified  components 
            margin-left: ;space to the left of the specified  components 
            margin-right: ;space to the right of the specified  components 
            margin:;>>gives an all round margin to all the sides of the specified components
            margin:top bottom left right;(margin:10px 20px 40px 30px;)
            margin:auto;>>center a container in the middle of the parent container>>as long as this container is reduced in width
        }
        padding: its the space between the content of the a container and its border.
        {
            padding-top: ;>>space between content and border to the top side
            padding-bottom: ;>>space between content and border to the bottom side
            padding-left>>space between content and border to the leftside
            padding-right>>space between content and border to the right  side
        }
        border:
    }
}
backgrounds{
    these are properties that allows us to manipulate background features of the context 
    {
        background-image: ;>>takes in a url that has a source origin to an image to be used in the background: ;
        background-position: ;>>defined by different positions(top left ,right ,center)
        background-size: ;>>defines the size of the background feature(cover"stretch to entire width" ,contain"within the borders of the content")
        background-repeat: ;>>denotes wether a background feature will repeat itslef and in which direction it will do so and if not to repeat{
            background-repeat: no-repeat ;
            background-repeat: repeat-x ;
            background-repeat: repeat-y ;

        }
        background-color: ;>>denotes the color of the background feature
        backdrop-filter: ;>>defines the opacity of the background feature
    }
}
displays>>refrers to the layout definition of the content of the container{
    display can be in different categories {
        flex>>the most common used display and this is because it offeres flexibility in the layout of the content of the container
        grid >>this display iuses grid templtae row and template columns to define the amout of columns and rows in which a lenght of a container wioll span(2fr 3fr 3fr )
        block >>by default a display is in block way >>content rack on top of eachother to the bottom 
    }

    flex>thiis is a display in the row directin by default and it can be changed to column direction by using the flex-direction property{
        flex direction property can change the direction to :{
            column>>items take the block format but flexible
            row >>items take the horizontal format 
            column-reverse>>interchange the direction  column 
            row-reverse>>interchange direction of row 
        }
        flex-wrap>> this referes to containing the items in a flexible container and the items dynamically move with the chages to the container {
            flex-wrap: wrap ;
            flex-wrap: wrap-reverse ;inverts contents on changes to container size 
            flex-wrap: nowrap;removes the wrapping 
        }
        justify-content>>means to align the content of a flexible container in relation to its neighbutring components {
            justify-content: space-between ;>>which leaves equal space in between two contents 
            justify-content:space-evenly>>leaves even ly spaces amongsts components 
            justify-content:space-around>>leaves equal spaces around components 
        }
        justify-items>
        align items>>this means to reposition the items in relation to the box model property 
    }
    flex grow>>the items targetted for the growth expands withthe ratio given  
    flex shrink <the items targetted for the shrinking  reduces  withthe ratio given  
    flex basis >>refers to the ration of items in relation to the parent size (a ratio is set to 1)

} 
positions >>this are key components in the motion of elements and contnet in a webpage 
they are as follows {
    position: static>>by default all elements are static in nature and once on scroll they are given motion 
    position: relative>>this motion referes to movement in relation to the body element (the parent containers move in relation to the body)
    position: absolute>>this refres to motion in relation to the parents margin and border box (the parent container is not affected by the child element)
    position: fixed>>this means that the motion is fixed 
    position: sticky>>this is motion in relation to certain break points 
    all these positions are used in four ways {
        top>>moves elements to the bottom 
        bottom >>moves elements to the top 
        left >>moves elements to the right 
         right >>moves elements to the left 
    }
}